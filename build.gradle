/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jshuster' at '4/11/17 8:51 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

ext.antlr = [
    grammarpackage: "com.jrshust.grammar",
    antlrSource: 'src/main/antlr',
    destinationDir: "generated_src/"
]

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    println "generating grammar sources"
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    println "HELLO"
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')
    println grammars

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    println "${antlr.destinationDir}/${pkg}"
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-visitor",
"-package", antlr.grammarpackage, grammars.files].flatten()

}

tasks.eclipse.dependsOn(compileJava)

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.antlr:antlr4-runtime:4.7'
    compile 'com.google.guava:guava:19.0'
    antlr4 "org.antlr:antlr4:4.7"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
